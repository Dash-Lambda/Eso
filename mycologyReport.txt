0 1 2 3 4 5 6 7 
GOOD: , works
GOOD: : duplicates
GOOD: empty stack pops zero
GOOD: 2-2 = 0
GOOD: | works
GOOD: 0! = 1
GOOD: 7! = 0
GOOD: 8*0 = 0
GOOD: # < jumps into <
GOOD: \ swaps
GOOD: 01` = 0
GOOD: 10` = 1
GOOD: 900pg gets 9
GOOD: p modifies space
Befunge-98 detected.
GOOD: wraparound works
GOOD: a pushes 10
GOOD: b-f push 11-15
GOOD: [ turns left
GOOD: ] turns right
GOOD: instructions between ; are skipped
UNDEF: # across left edge hits easternmost cell in file
UNDEF: # across left edge hits easternmost cell on line
GOOD: 0k^ doesn't execute ^
GOOD: 1k[ turns left from k
GOOD: 4k # jumps 4 times from k
GOOD: 2k ;;;5 executes 5 thrice
GOOD: 2k# jumps twice from k
GOOD: ak47k$ leaves 3 fours on stack
GOOD: 2k6 leaves 3 sixes on stack
GOOD: putting to and getting (-3 -2) worked, assuming working negative Funge-Space
GOOD: 9 / 2 = 4
GOOD: 9 % 2 = 1
About to test division by zero...
GOOD: 1 / 0 = 0
GOOD: 1 % 0 = 0
GOOD: SGML spaces
GOOD: n clears 15-cell stack: assuming it works
GOOD: r reflects

GOOD: 21w turns right
GOOD: ' pushes 20
GOOD: 'vs^ goes through
GOOD: 'vs places v
GOOD: z doesn't reflect
GOOD: 3j jumps over 3 cells
GOOD: 04-j jumps backward the right number of cells
GOOD: 1j ^ jumps into ^
GOOD: 10x goes east
GOOD: 1-1x goes southwest
GOOD: 32x sets delta to (3, 2)
Assuming we can trust x...
GOOD: wraparound with non-cardinal delta appears to work
GOOD: { transfers cells correctly
GOOD: { sets storage offset correctly, and p uses it
GOOD: } resets storage offset
GOOD: } transfers cells correctly
GOOD: { with negative argument works
GOOD: } with negative argument works
GOOD: } reflects when stack stack has only one stack
GOOD: u reflects when stack stack has only one stack
GOOD: u with zero count does nothing
GOOD: u with a positive count transfers cells correctly
GOOD: u with a negative count transfers cells correctly
y claims all of the following:
	That t is implemented
	That buffered I/O is being used
	That the number of bytes per cell is 4 
	That the interpreter's handprint is 1165193033 
	That the interpreter's version is 1 
	That the behaviour of = is unavailable
	That the system's path separator is /
	That this Funge has 2 dimensions
	That the ID of the current IP is 0 
	That the team number of the current IP is 0 
	That the position of the IP was ( 64 89 )
	That the delta of the IP was ( -1 0 )
	That the offset of the IP was ( 0 0 )
	That the least point containing a non-space cell is ( -3 -2 )
	That the greatest point, relative to that point, is ( 183 911 )
	That the day of the month is 26 
	That the month is 2 
	That the year is 2020 
	That the time is 09 : 55 : 53 
	That the size of the stack stack is 1 
	That the stack sizes are [ 0 ] from top to bottom
	That the command-line arguments were: [ null ]
	That the environment variables are:
Best that the above claims are manually verified to be correct.
GOOD: 1y works
GOOD: 5y works
GOOD: dy works
GOOD: 1y and 5y do not disagree about =
No reliable cross-platform method of testing: assume = works
UNDEF: i not implemented according to 1y - cannot test it
UNDEF: can't test o without working i, may overwrite some existing file
1y says this is Concurrent Funge-98

Going to test concurrent execution with 2 IPs.
Assuming that instructions without any particular concurrency-related behaviour, such as ^>v<#, take one tick.
Will continue to produce textual output, so strings must work correctly where concurrency is concerned: "a b" should take 5 ticks, 'a should take 1.

GOOD: basic concurrency seems to work
GOOD: reflected IP copied stack
Parent IP: ID 0 
Child IP: ID 1 
GOOD: child IP executed before parent IP
GOOD: single space takes 0 ticks
GOOD: multiple spaces take 0 ticks
GOOD: z takes 1 tick
GOOD: jumping over code with ; takes 0 ticks
GOOD: 5kz takes 3 ticks
GOOD: "a  b" takes 5 ticks

Done testing concurrent execution.

GOOD: y acts as pick instruction if given large enough argument
GOOD: ] turns flying IP right
GOOD: : on empty stack makes stack size 2 according to y
GOOD: \ on empty stack makes stack size 2 according to y

GOOD: ( pops correctly
GOOD: ) pops correctly

Here's how your interpreter deals with some possibilities unmentioned in the specification...
UNDEF: k with a negative argument executes 0 times or less often than the absolute value of the argument
UNDEF: the empty string wrapped around the edge of space contains 1 character(s) (hopefully spaces)
UNDEF: ( with a negative count reflects and pops 0 times or less than the absolute value of the count
UNDEF: ) with a negative count reflects and pops 0 times or less than the absolute value of the count

GOOD: null byte in string and zero compare as equal
GOOD: ' followed by a byte greater than 127 works
GOOD: form feed does not appear to exist in Funge-Space
GOOD: y reports shrunk bounds correctly after spacing top-left corner
GOOD: y reports shrunk bounds correctly after spacing right edge
GOOD: y reports shrunk bounds correctly after spacing bottom edge

The Befunge-98 core has been completely tested.
Moving on to fingerprints.
A line (consider it UNDEF, though not marked as such) will be emitted for each fingerprint tested for, whether or not the interpreter supports it.
If the interpreter loads the fingerprint, subsequent lines will be GOOD or BAD depending on whether the interpreter behaves according to the fingerprint's specification.
Fingerprints will be unloaded after being tested. If ) does not work, it will fail silently.

Testing fingerprint NULL... loaded.
GOOD: all of A-Z reflected

Testing fingerprint HRTI... loaded.
UNDEF: G gives clock granularity as 1000 microseconds
GOOD: T reflected when called before M
UNDEF: S pushed 239000 
UNDEF: T after M pushed 0 and a second T, after 675 ys, pushed 9918000 
GOOD: ET reflected

Testing fingerprint MODE... not loaded.
Testing fingerprint MODU... loaded.
GOOD: a04-M pushes -2
Assuming that "C-language integer remainder" refers to C99 C, it used to be undefined...
GOOD: a04-R pushes 2
GOOD: 0a-04-R pushes -2
GOOD: 0a-04-U pushes 2

Testing fingerprint ORTH... not loaded.
Testing fingerprint PERL... not loaded.
Testing fingerprint REFC... loaded.
UNDEF: 12R34R56R pushed the scalars [ 0 1 2 ]
GOOD: D returned first vector
GOOD: D returned second vector
GOOD: D returned third vector
GOOD: D returned first vector the second time

Testing fingerprint ROMA... loaded.
GOOD: I pushes 1 
GOOD: V pushes 5 
GOOD: X pushes 10 
GOOD: L pushes 50 
GOOD: C pushes 100 
GOOD: D pushes 500 
GOOD: M pushes 1000 

Testing fingerprint TOYS... not loaded.
Testing fingerprint TURT... not loaded.
Testing fingerprint BASE... not loaded.
Testing fingerprint CPLI... loaded.
GOOD: ( 1+2i) + (3+4i) is ( 4+6i) according to A
GOOD: ( 3+4i) - (2+ i) is ( 1+3i) according to S
GOOD: ( 1+2i) * (3+4i) is (10-5i) according to M
GOOD: (88-4i) / (9+4i) is ( 8-4i) according to D
GOOD: 34V is 5
UNDEF: abO outputs 10+11i
UNDEF: 0a-bO outputs -10+11i
UNDEF: a0b-O outputs 10-11i
UNDEF: 0a-0b-O outputs -10-11i

Testing fingerprint DATE... not loaded.
Testing fingerprint DIRF... not loaded.
Testing fingerprint EVAR... not loaded.
Testing fingerprint FILE... not loaded.
Testing fingerprint FING... not loaded.
Testing fingerprint FIXP... not loaded.
Testing fingerprint FPSP... not loaded.
Testing fingerprint FPDP... not loaded.
Testing fingerprint 3DSP... not loaded.
Testing fingerprint FRTH... not loaded.
Testing fingerprint IIPC... not loaded.
Testing fingerprint IMAP... not loaded.
Testing fingerprint INDV... not loaded.
Testing fingerprint REXP... not loaded.
Testing fingerprint SOCK... not loaded.
Testing fingerprint STRN... not loaded.
Testing fingerprint SUBR... not loaded.
Testing fingerprint TIME... not loaded.
Testing fingerprint JSTR... not loaded.

About to test detailed () behaviour with two fingerprints.
MODU and ROMA were chosen for their simplicity (for implementers) and partially overlapping instruction set.
Loaded ROMA, then MODU.
GOOD: M has MODU semantics
GOOD: CDILRUVX doesn't reflect
Unloaded ROMA.
GOOD: M has ROMA semantics
GOOD: RU doesn't reflect
GOOD: all of CDILVX reflected
Unloaded MODU.
GOOD: R and U reflected

About to test, using ROMA, whether t copies the parent IP's loaded fingerprint semantics to the child IP.
This is unmentioned in the specification, and thus is UNDEF.
Loaded ROMA.
Forked into child IP.
UNDEF: IVXLCDM didn't reflect: child IP has ROMA loaded

The Mycology Befunge-98 test suite is practically done.
Trying to quit with q. If the return status is 15, consider it GOOD...
