Run starting. Expected test count is: 0
EsoCommandParserSpec:
EsoCommandParser
- should fail on empty input
- should recognize unary commands
- should recognize commands followed by an argument
- should recognize commands followed by multiple arguments
LazyKAnyToCCSpec:
LazyK_CC <=> LazyK
- should preserve the behavior of hworldCC.lazy when translating from LazyK_CC to LazyK
- should preserve the behavior of hworldIota.lazy when translating from LazyK to LazyK_CC
- should preserve the behavior of hworldJot.lazy when translating from LazyK to LazyK_CC
- should preserve the behavior of hworld.lazy when translating from LazyK to LazyK_CC
BFToMetatapeSpec:
BFToMetatape
- should preserve the behavior of bitWidth.b
EmmentalSpec:
Emmental
- should run hworld.emm correctly
- should return a referentially transparent function for hworld.emm
GlyphoSpec:
Glypho
- should run hworld.glo correctly
- should return a referentially transparent function for hworld.glo
LazyBirdSpec:
LazyBird
- should run hworld.lzb correctly
- should run fib.lzb correctly
- should run fibComb.lzb correctly
- should run asciiCat.lzb correctly
- should run equals.lzb correctly
- should interpret named combinators correctly
- should return a referentially transparent function for hworld.lzb
- should return a referentially transparent function for fib.lzb
- should return a referentially transparent function for fibComb.lzb
- should return a referentially transparent function for asciiCat.lzb
- should return a referentially transparent function for equals.lzb
BFToLazyKSpec:
BFToLazyK
- should preserve the behavior of bitWidth.b
SNUSPSpec:
SNUSP
- should run hworld.snusp correctly
- should run bitWidth.snusp correctly
- should return a referentially transparent function for hworld.snusp
- should return a referentially transparent function for bitWidth.snusp
ThueSpec:
Thue
- should run hworld.th correctly
- should return a referentially transparent function for hworld.th
LazyKAnyToUnlSpec:
LazyK_Unlambda <=> LazyK
- should preserve the behavior of hworldCC.lazy when translating from LazyK to LazyK_Unlambda
- should preserve the behavior of hworldIota.lazy when translating from LazyK to LazyK_Unlambda
- should preserve the behavior of hworldJot.lazy when translating from LazyK to LazyK_Unlambda
- should preserve the behavior of hworld.lazy when translating from LazyK_Unlambda to LazyK
RunProgHandlerSpec:
RunProgHandler
- should fail on an unknown file extension
- should run hworldb.txt correctly with language override arg
- should recognize known file extensions
- should print ASCII values if printNum is on
- should print detailed information if log is on
- should print the program duration if time is on
- should print initialization time if log and time flags are on
- should fail to read input if an inaccessible file is given
- should read input from a file if given one
- should correctly append console input to file input if appendInp is on
- should not append console input to file input if appendInp is off
- should limit output length if olen >= 0
- should build a translator path if needed
- should cache built programs if the cache flag is on
- should not cache built programs if the cache flag is off
DeadfishSpec:
Deadfish
- should run hworld.df correctly
- should return a referentially transparent function for hworld.df
LambdaToLazyKUnlSpec:
Lambda_Calculus => LazyK_Unlambda
- should preserve the behavior of absSpaceLazyK.txt
NULLSpec:
NULL
- should run hworld.nul correctly
- should return a referentially transparent function for hworld.nul
WierdSpec:
Wierd
- should run quine.wd correctly
- should return a referentially transparent function for quine.wd
TranslateHandlerSpec:
TranslateHandler
- should fail on unknown file extensions
- should translate hworldfl.txt to BrainFuck correctly with language override
- should recognize known file extensions
- should chain translators if needed
WhiteSpaceSpec:
WhiteSpace
- should run hworld.ws correctly
- should return a referentially transparent function for hworld.ws
OokSpec:
Ook <=> BrainFuck
- should preserve the behavior of hworld.ook when translating from BrainFuck to Ook
- should preserve the behavior of hworld.b when translating from Ook to BrainFuck
PreludeSpec:
Prelude
- should run hworld.pld correctly in parallel
- should run hworld.pld correctly in sequence
- should return a referentially transparent function in parallel
- should return a referentially transparent function in sequence
MemTapeSpec:
MemTape
- should respect static size
- should respect out-of-bounds gets when dynamic
- should respect out-of-bounds sets when dynamic
ShowSyntaxHandlerSpec:
ShowSyntaxHandler
- should correctly display syntax for FlufflePuff
DefineBFLangHandlerSpec:
DefineBFLangHandler
- should correctly define a BF lang
FungeSpec:
Befunge-93
- should pass mycology
- should return a referentially transparent function for mycology.b98
Befunge-98
- should pass mycology
- should return a referentially transparent function for hworld.b98
LazyKSpec:
LazyK
- should run hworld.lazy correctly
- should run unlambda.lazy correctly
- should run primes.lazy correctly
- should run fib.lazy correctly
- should run reverse.lazy correctly
- should run cat.lazy correctly
- should return a referentially transparent function for hworld.lazy
- should return a referentially transparent function for unlambda.lazy
- should return a referentially transparent function for primes.lazy
- should return a referentially transparent function for fib.lazy
- should return a referentially transparent function for reverse.lazy
- should return a referentially transparent function for cat.lazy
TranspileHandlerSpec:
TranspileHandler
- should fail on unknown file extensions
- should transpile hworldb.txt to Metatape correctly with language override
- should recognize known file extensions
- should build a translator path if needed
GlyphoShorthandSpec:
GlyphoShorthand <=> Glypho
- should preserve the behavior of hworld.glos when translating from Glypho to GlyphoShorthand
- should preserve the behavior of hworld.glo
FlufflePuffSpec:
FlufflePuff <=> BrainFuck
- should preserve the behavior of hworld.fl when translating from BrainFuck to FlufflePuff
- should preserve the behavior of hworld.b when translating from FlufflePuff to BrainFuck
VolatileSpec:
Volatile
- should run hworld.vol correctly
- should return a referentially transparent function for hworld.vol
BFToPreludeSpec:
BFToPrelude
- should preserve the behavior of hworld.b
BFToSNUSPSpec:
BFToSNUSP
- should preserve the behavior of bitWidth.b
LazyKAnyToIotaSpec:
LazyK_Iota <=> LazyK
- should preserve the behavior of hworldCC.lazy when translating from LazyK to LazyK_Iota
- should preserve the behavior of hworldIota.lazy when translating from LazyK_Iota to LazyK
- should preserve the behavior of hworldJot.lazy when translating from LazyK to LazyK_Iota
- should preserve the behavior of hworld.lazy when translating from LazyK to LazyK_Iota
LoadBFLangsHandlerSpec:
LoadBFLangsHandlerSpec
- should fail on an inaccessible file
- should correctly load languages from a file
ALPLSpec:
ALPL
- should run hworld.alpl correctly
- should run cat.alpl correctly
- should return a referentially transparent function for hworld.alpl
- should return a referentially transparent function for cat.alpl
UnlambdaSpec:
Unlambda
- should run hworld.unl correctly
- should run alphatest.unl correctly
- should run adventure.unl correctly
- should run primes.unl correctly
- should return a referentially transparent function for hworld.unl
- should return a referentially transparent function for alphatest.unl
- should return a referentially transparent function for adventure.unl
- should return a referentially transparent function for primes.unl
WSAssemblySpec:
WSAssembly
- should preserve the behavior of hworld.wsa
- should preserve the structure of hworld.ws
PlattsSpec:
Platts
- should run hworld.plts correctly
- should return a referentially transparent function for hworld.plts
FracTranSpec:
FracTran++
- should run hworld.ftp correctly
- should run primes.ftp correctly
- should return a referentially transparent function for hworld.ftp
- should return a referentially transparent function for primes.ftp
FracTran
- should run primes.ft correctly
- should return a referentially transparent function for primes.ft
SlashesSpec:
///
- should run hworld.slash correctly
- should return a referentially transparent function for hworld.slash
LazyKToJotSpec:
LazyK_Jot <=> LazyK
- should preserve the behavior of hworldCC.lazy when translating from LazyK to LazyK_Jot
- should preserve the behavior of hworldIota.lazy when translating from LazyK to LazyK_Jot
- should preserve the behavior of hworldJot.lazy when translating from LazyK_Jot to LazyK
- should preserve the behavior of hworld.lazy when translating from LazyK to LazyK_Jot
PDPSpec:
P''
- should run hworld.pdp correctly
- should return a referentially transparent function for hworld.pdp
BFISpec:
BFBase
- should run hworld.b correctly
- should run hworldBugTest.b correctly
- should run bitWidth.b correctly
- should respect dynamic tape size setting
- should return a referentially transparent function for hworld.b
- should return a referentially transparent function for hworldBugTest.b
- should return a referentially transparent function for bitWidth.b
bfOpt
- should run hworld.b correctly
- should run hworldBugTest.b correctly
- should run bitWidth.b correctly
- should run lostKingdom.b correctly
- should respect dynamic tape size setting
- should return a referentially transparent function for hworld.b
- should return a referentially transparent function for hworldBugTest.b
- should return a referentially transparent function for bitWidth.b
BFComp
- should run hworld.b correctly
- should run hworldBugTest.b correctly
- should run bitWidth.b correctly
- should run mandelbrot.b correctly
- should respect dynamic tape size setting
- should return a referentially transparent function for hworld.b
- should return a referentially transparent function for hworldBugTest.b
- should return a referentially transparent function for bitWidth.b
GrassSpec:
Grass
- should run hworld.grs correctly
- should return a referentially transparent function for hworld.grs
PrimeNumToolsSpec:
PrimeNumTools
- should generate a list of prime number Ints by trial division
- should generate a list of prime number SafeLongs by trial division
- should generate a list of prime number SafeLongs by incremental SOE
- should correctly identify primes numbers
- should factor a number such that it is equal to the product of its factors
LambdaToUnlambdaSpace:
Lambda_Calculus => Unlambda
- should preserve the behavior of absCountUnlambda.txt
PATHSpec:
PATH
- should run hworld.path correctly
- should return a referentially transparent function for hworld.path
WordLangSpec:
WordLang
- should run helloo.wl correctly
- should run camo.wl correctly
- should run listing.wl correctly
- should run flag.wl correctly
- should run letsLive.wl correctly
- should run someday.wl correctly
- should run listChars.wl correctly
- should run cat.wl correctly
- should return a referentially transparent function for helloo.wl
- should return a referentially transparent function for camo.wl
- should return a referentially transparent function for listing.wl
- should return a referentially transparent function for flag.wl
- should return a referentially transparent function for letsLive.wl
- should return a referentially transparent function for someday.wl
- should return a referentially transparent function for listChars.wl
- should return a referentially transparent function for cat.wl
SetVarHandlerSpec:
SetVarHandler
- should recognize all true keywords
- should recognize all false keywords
- should recognize positive and negative numbers
- should recognize character input
- should recognize multiple assignments
- should report invalid variable names
- should report invalid value types
MetatapeSpec:
Metatape
- should run hworld.mt correctly
- should run bitWidth.mt correctly
- should return a referentially transparent function for hworld.mt
- should return a referentially transparent function for bitWidth.mt
Run completed in 1 minute, 29 seconds.
Total number of tests run: 198
Suites: completed 48, aborted 0
Tests: succeeded 198, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
